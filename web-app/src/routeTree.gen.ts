/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestsRouteRouteImport } from './routes/tests/route'

const IndexLazyRouteImport = createFileRoute('/')()
const TestsIndexLazyRouteImport = createFileRoute('/tests/')()
const AuthIndexLazyRouteImport = createFileRoute('/auth/')()
const AdminIndexLazyRouteImport = createFileRoute('/admin/')()
const AuthWelcomeLazyRouteImport = createFileRoute('/auth/welcome')()
const AuthVerifyWelcomeOtpLazyRouteImport = createFileRoute(
  '/auth/verify-welcome-otp',
)()
const AuthRegisterLazyRouteImport = createFileRoute('/auth/register')()
const AuthRecoveryRequestLazyRouteImport = createFileRoute(
  '/auth/recovery-request',
)()
const TestsLevelIndexLazyRouteImport = createFileRoute('/tests/$level/')()

const TestsRouteRoute = TestsRouteRouteImport.update({
  id: '/tests',
  path: '/tests',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const TestsIndexLazyRoute = TestsIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TestsRouteRoute,
} as any).lazy(() => import('./routes/tests/index.lazy').then((d) => d.Route))
const AuthIndexLazyRoute = AuthIndexLazyRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/auth/index.lazy').then((d) => d.Route))
const AdminIndexLazyRoute = AdminIndexLazyRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/admin/index.lazy').then((d) => d.Route))
const AuthWelcomeLazyRoute = AuthWelcomeLazyRouteImport.update({
  id: '/auth/welcome',
  path: '/auth/welcome',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/auth/welcome.lazy').then((d) => d.Route))
const AuthVerifyWelcomeOtpLazyRoute =
  AuthVerifyWelcomeOtpLazyRouteImport.update({
    id: '/auth/verify-welcome-otp',
    path: '/auth/verify-welcome-otp',
    getParentRoute: () => rootRouteImport,
  } as any).lazy(() =>
    import('./routes/auth/verify-welcome-otp.lazy').then((d) => d.Route),
  )
const AuthRegisterLazyRoute = AuthRegisterLazyRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/auth/register.lazy').then((d) => d.Route))
const AuthRecoveryRequestLazyRoute = AuthRecoveryRequestLazyRouteImport.update({
  id: '/auth/recovery-request',
  path: '/auth/recovery-request',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/auth/recovery-request.lazy').then((d) => d.Route),
)
const TestsLevelIndexLazyRoute = TestsLevelIndexLazyRouteImport.update({
  id: '/$level/',
  path: '/$level/',
  getParentRoute: () => TestsRouteRoute,
} as any).lazy(() =>
  import('./routes/tests/$level/index.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/tests': typeof TestsRouteRouteWithChildren
  '/auth/recovery-request': typeof AuthRecoveryRequestLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/auth/verify-welcome-otp': typeof AuthVerifyWelcomeOtpLazyRoute
  '/auth/welcome': typeof AuthWelcomeLazyRoute
  '/admin': typeof AdminIndexLazyRoute
  '/auth': typeof AuthIndexLazyRoute
  '/tests/': typeof TestsIndexLazyRoute
  '/tests/$level': typeof TestsLevelIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/auth/recovery-request': typeof AuthRecoveryRequestLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/auth/verify-welcome-otp': typeof AuthVerifyWelcomeOtpLazyRoute
  '/auth/welcome': typeof AuthWelcomeLazyRoute
  '/admin': typeof AdminIndexLazyRoute
  '/auth': typeof AuthIndexLazyRoute
  '/tests': typeof TestsIndexLazyRoute
  '/tests/$level': typeof TestsLevelIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/tests': typeof TestsRouteRouteWithChildren
  '/auth/recovery-request': typeof AuthRecoveryRequestLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/auth/verify-welcome-otp': typeof AuthVerifyWelcomeOtpLazyRoute
  '/auth/welcome': typeof AuthWelcomeLazyRoute
  '/admin/': typeof AdminIndexLazyRoute
  '/auth/': typeof AuthIndexLazyRoute
  '/tests/': typeof TestsIndexLazyRoute
  '/tests/$level/': typeof TestsLevelIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/tests'
    | '/auth/recovery-request'
    | '/auth/register'
    | '/auth/verify-welcome-otp'
    | '/auth/welcome'
    | '/admin'
    | '/auth'
    | '/tests/'
    | '/tests/$level'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/recovery-request'
    | '/auth/register'
    | '/auth/verify-welcome-otp'
    | '/auth/welcome'
    | '/admin'
    | '/auth'
    | '/tests'
    | '/tests/$level'
  id:
    | '__root__'
    | '/'
    | '/tests'
    | '/auth/recovery-request'
    | '/auth/register'
    | '/auth/verify-welcome-otp'
    | '/auth/welcome'
    | '/admin/'
    | '/auth/'
    | '/tests/'
    | '/tests/$level/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  TestsRouteRoute: typeof TestsRouteRouteWithChildren
  AuthRecoveryRequestLazyRoute: typeof AuthRecoveryRequestLazyRoute
  AuthRegisterLazyRoute: typeof AuthRegisterLazyRoute
  AuthVerifyWelcomeOtpLazyRoute: typeof AuthVerifyWelcomeOtpLazyRoute
  AuthWelcomeLazyRoute: typeof AuthWelcomeLazyRoute
  AdminIndexLazyRoute: typeof AdminIndexLazyRoute
  AuthIndexLazyRoute: typeof AuthIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tests': {
      id: '/tests'
      path: '/tests'
      fullPath: '/tests'
      preLoaderRoute: typeof TestsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tests/': {
      id: '/tests/'
      path: '/'
      fullPath: '/tests/'
      preLoaderRoute: typeof TestsIndexLazyRouteImport
      parentRoute: typeof TestsRouteRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/welcome': {
      id: '/auth/welcome'
      path: '/auth/welcome'
      fullPath: '/auth/welcome'
      preLoaderRoute: typeof AuthWelcomeLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/verify-welcome-otp': {
      id: '/auth/verify-welcome-otp'
      path: '/auth/verify-welcome-otp'
      fullPath: '/auth/verify-welcome-otp'
      preLoaderRoute: typeof AuthVerifyWelcomeOtpLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/recovery-request': {
      id: '/auth/recovery-request'
      path: '/auth/recovery-request'
      fullPath: '/auth/recovery-request'
      preLoaderRoute: typeof AuthRecoveryRequestLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tests/$level/': {
      id: '/tests/$level/'
      path: '/$level'
      fullPath: '/tests/$level'
      preLoaderRoute: typeof TestsLevelIndexLazyRouteImport
      parentRoute: typeof TestsRouteRoute
    }
  }
}

interface TestsRouteRouteChildren {
  TestsIndexLazyRoute: typeof TestsIndexLazyRoute
  TestsLevelIndexLazyRoute: typeof TestsLevelIndexLazyRoute
}

const TestsRouteRouteChildren: TestsRouteRouteChildren = {
  TestsIndexLazyRoute: TestsIndexLazyRoute,
  TestsLevelIndexLazyRoute: TestsLevelIndexLazyRoute,
}

const TestsRouteRouteWithChildren = TestsRouteRoute._addFileChildren(
  TestsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  TestsRouteRoute: TestsRouteRouteWithChildren,
  AuthRecoveryRequestLazyRoute: AuthRecoveryRequestLazyRoute,
  AuthRegisterLazyRoute: AuthRegisterLazyRoute,
  AuthVerifyWelcomeOtpLazyRoute: AuthVerifyWelcomeOtpLazyRoute,
  AuthWelcomeLazyRoute: AuthWelcomeLazyRoute,
  AdminIndexLazyRoute: AdminIndexLazyRoute,
  AuthIndexLazyRoute: AuthIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
