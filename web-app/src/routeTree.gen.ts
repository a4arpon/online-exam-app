/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as URouteRouteImport } from './routes/u/route'
import { Route as AuthRouteRouteImport } from './routes/auth/route'

const IndexLazyRouteImport = createFileRoute('/')()
const UIndexLazyRouteImport = createFileRoute('/u/')()
const AuthIndexLazyRouteImport = createFileRoute('/auth/')()
const AdminIndexLazyRouteImport = createFileRoute('/admin/')()
const AuthWelcomeLazyRouteImport = createFileRoute('/auth/welcome')()
const AuthVerifyWelcomeOtpLazyRouteImport = createFileRoute(
  '/auth/verify-welcome-otp',
)()
const AuthRegisterLazyRouteImport = createFileRoute('/auth/register')()
const AuthRecoveryRequestLazyRouteImport = createFileRoute(
  '/auth/recovery-request',
)()
const UTestsLevelIndexLazyRouteImport = createFileRoute('/u/tests/$level/')()

const URouteRoute = URouteRouteImport.update({
  id: '/u',
  path: '/u',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const UIndexLazyRoute = UIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => URouteRoute,
} as any).lazy(() => import('./routes/u/index.lazy').then((d) => d.Route))
const AuthIndexLazyRoute = AuthIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/auth/index.lazy').then((d) => d.Route))
const AdminIndexLazyRoute = AdminIndexLazyRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/admin/index.lazy').then((d) => d.Route))
const AuthWelcomeLazyRoute = AuthWelcomeLazyRouteImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/auth/welcome.lazy').then((d) => d.Route))
const AuthVerifyWelcomeOtpLazyRoute =
  AuthVerifyWelcomeOtpLazyRouteImport.update({
    id: '/verify-welcome-otp',
    path: '/verify-welcome-otp',
    getParentRoute: () => AuthRouteRoute,
  } as any).lazy(() =>
    import('./routes/auth/verify-welcome-otp.lazy').then((d) => d.Route),
  )
const AuthRegisterLazyRoute = AuthRegisterLazyRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() => import('./routes/auth/register.lazy').then((d) => d.Route))
const AuthRecoveryRequestLazyRoute = AuthRecoveryRequestLazyRouteImport.update({
  id: '/recovery-request',
  path: '/recovery-request',
  getParentRoute: () => AuthRouteRoute,
} as any).lazy(() =>
  import('./routes/auth/recovery-request.lazy').then((d) => d.Route),
)
const UTestsLevelIndexLazyRoute = UTestsLevelIndexLazyRouteImport.update({
  id: '/tests/$level/',
  path: '/tests/$level/',
  getParentRoute: () => URouteRoute,
} as any).lazy(() =>
  import('./routes/u/tests/$level/index.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/u': typeof URouteRouteWithChildren
  '/auth/recovery-request': typeof AuthRecoveryRequestLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/auth/verify-welcome-otp': typeof AuthVerifyWelcomeOtpLazyRoute
  '/auth/welcome': typeof AuthWelcomeLazyRoute
  '/admin': typeof AdminIndexLazyRoute
  '/auth/': typeof AuthIndexLazyRoute
  '/u/': typeof UIndexLazyRoute
  '/u/tests/$level': typeof UTestsLevelIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/auth/recovery-request': typeof AuthRecoveryRequestLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/auth/verify-welcome-otp': typeof AuthVerifyWelcomeOtpLazyRoute
  '/auth/welcome': typeof AuthWelcomeLazyRoute
  '/admin': typeof AdminIndexLazyRoute
  '/auth': typeof AuthIndexLazyRoute
  '/u': typeof UIndexLazyRoute
  '/u/tests/$level': typeof UTestsLevelIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/u': typeof URouteRouteWithChildren
  '/auth/recovery-request': typeof AuthRecoveryRequestLazyRoute
  '/auth/register': typeof AuthRegisterLazyRoute
  '/auth/verify-welcome-otp': typeof AuthVerifyWelcomeOtpLazyRoute
  '/auth/welcome': typeof AuthWelcomeLazyRoute
  '/admin/': typeof AdminIndexLazyRoute
  '/auth/': typeof AuthIndexLazyRoute
  '/u/': typeof UIndexLazyRoute
  '/u/tests/$level/': typeof UTestsLevelIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/u'
    | '/auth/recovery-request'
    | '/auth/register'
    | '/auth/verify-welcome-otp'
    | '/auth/welcome'
    | '/admin'
    | '/auth/'
    | '/u/'
    | '/u/tests/$level'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/recovery-request'
    | '/auth/register'
    | '/auth/verify-welcome-otp'
    | '/auth/welcome'
    | '/admin'
    | '/auth'
    | '/u'
    | '/u/tests/$level'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/u'
    | '/auth/recovery-request'
    | '/auth/register'
    | '/auth/verify-welcome-otp'
    | '/auth/welcome'
    | '/admin/'
    | '/auth/'
    | '/u/'
    | '/u/tests/$level/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  URouteRoute: typeof URouteRouteWithChildren
  AdminIndexLazyRoute: typeof AdminIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/u': {
      id: '/u'
      path: '/u'
      fullPath: '/u'
      preLoaderRoute: typeof URouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/u/': {
      id: '/u/'
      path: '/'
      fullPath: '/u/'
      preLoaderRoute: typeof UIndexLazyRouteImport
      parentRoute: typeof URouteRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof AuthIndexLazyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/welcome': {
      id: '/auth/welcome'
      path: '/welcome'
      fullPath: '/auth/welcome'
      preLoaderRoute: typeof AuthWelcomeLazyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/verify-welcome-otp': {
      id: '/auth/verify-welcome-otp'
      path: '/verify-welcome-otp'
      fullPath: '/auth/verify-welcome-otp'
      preLoaderRoute: typeof AuthVerifyWelcomeOtpLazyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterLazyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/recovery-request': {
      id: '/auth/recovery-request'
      path: '/recovery-request'
      fullPath: '/auth/recovery-request'
      preLoaderRoute: typeof AuthRecoveryRequestLazyRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/u/tests/$level/': {
      id: '/u/tests/$level/'
      path: '/tests/$level'
      fullPath: '/u/tests/$level'
      preLoaderRoute: typeof UTestsLevelIndexLazyRouteImport
      parentRoute: typeof URouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthRecoveryRequestLazyRoute: typeof AuthRecoveryRequestLazyRoute
  AuthRegisterLazyRoute: typeof AuthRegisterLazyRoute
  AuthVerifyWelcomeOtpLazyRoute: typeof AuthVerifyWelcomeOtpLazyRoute
  AuthWelcomeLazyRoute: typeof AuthWelcomeLazyRoute
  AuthIndexLazyRoute: typeof AuthIndexLazyRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthRecoveryRequestLazyRoute: AuthRecoveryRequestLazyRoute,
  AuthRegisterLazyRoute: AuthRegisterLazyRoute,
  AuthVerifyWelcomeOtpLazyRoute: AuthVerifyWelcomeOtpLazyRoute,
  AuthWelcomeLazyRoute: AuthWelcomeLazyRoute,
  AuthIndexLazyRoute: AuthIndexLazyRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface URouteRouteChildren {
  UIndexLazyRoute: typeof UIndexLazyRoute
  UTestsLevelIndexLazyRoute: typeof UTestsLevelIndexLazyRoute
}

const URouteRouteChildren: URouteRouteChildren = {
  UIndexLazyRoute: UIndexLazyRoute,
  UTestsLevelIndexLazyRoute: UTestsLevelIndexLazyRoute,
}

const URouteRouteWithChildren =
  URouteRoute._addFileChildren(URouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  URouteRoute: URouteRouteWithChildren,
  AdminIndexLazyRoute: AdminIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
